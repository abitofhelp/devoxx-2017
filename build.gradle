buildscript {
    ext.kotlin_version = '1.3.21'
    ext.springBootVersion = '2.1.2.RELEASE' //'2.2.0.BUILD-SNAPSHOT'

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
        classpath "org.owasp:dependency-check-gradle:4.0.2"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "gradle.plugin.com.github.ksoichiro:gradle-build-info-plugin:0.2.0"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.2.0"
    }
}

subprojects {
    apply plugin: "kotlin"
    apply plugin: "kotlin-spring"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.junit.platform.gradle.plugin"

    sourceCompatibility = 1.9
    targetCompatibility = 1.9

    configurations {
        testOutput.extendsFrom (testCompile)
    }

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://repo.spring.io/milestone/"
        }
        maven { url 'https://jitpack.io' }
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.data:spring-data-releasetrain:Kay-SR1'
        }
    }

    task jarTest (type: Jar, dependsOn: testClasses) {
        from sourceSets.main.output,sourceSets.test.output
        archiveClassifier  = 'test'
    }

    artifacts {
        testOutput jarTest
    }

    dependencies {
        
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        compile "org.jetbrains.kotlin:kotlin-reflect"
        compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
        compile "org.springframework.boot:spring-boot:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-logging:${springBootVersion}"

        testCompile("org.junit.jupiter:junit-jupiter-api:5.4.0")
        testCompile "com.github.sbrannen:spring-test-junit5:1.3.2"
        testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.0")
        testRuntime("org.junit.platform:junit-platform-launcher:1.4.0")
    }
}

project(":main-partition") {
    apply plugin: "org.springframework.boot"
    apply plugin: "docker"
    apply plugin: "com.github.ksoichiro.build.info"

    dependencies {
        compile project(":domain")
        compile project(":app-api")
        compile project(":app-impl")
        compile project(":infra-web")
        compile project(":infra-persistence")

        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
            exclude module: "spring-boot-starter-tomcat"
        }
        compile("org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}") {
            exclude module: "jboss-annotations-api_1.2_spec"
        }
        compile "org.springframework.boot:spring-boot-actuator:${springBootVersion}"
        testCompile "io.rest-assured:rest-assured:3.3.0"

    }

    springBoot {
        buildInfo()
    }

    task buildDocker(type: Docker, dependsOn: build, group: "build") {
        description = "Build Docker image."
        applicationName = "devoxx-2017"
        dockerfile = file("Dockerfile")
        tag = "sourcedbvba/devoxx-2017"
        doFirst {
            copy {
                from jar
                into "${stageDir}/target"
            }
        }
    }
}

project(":domain") {

}

project(":app-api") {

}

project(":app-impl") {
    dependencies {
        compile project(":app-api")
        compile project(":domain")

        testCompile project(path: ":infra-persistence", configuration: "testOutput")
        testCompile project(path: ":domain", configuration: "testOutput")
    }
}

project("infra-persistence") {
    apply plugin: "kotlin-noarg"

    dependencies {
        compile project(":domain")
        compile "org.springframework.data:spring-data-mongodb"
        testCompile "com.github.fakemongo:fongo:2.2.0-RC2"
    }

    noArg {
        annotation("org.mongodb.morphia.annotations.Entity")
    }
}

project("infra-web") {
    dependencies {
        compile project(":app-api")
        compile "org.springframework:spring-web:5.1.4.RELEASE"
        compile "com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.3"
    }
}
